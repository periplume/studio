#!/usr/bin/env bash
# file: dsink
# source: https://github.com/periplume/dotfiles.git
# author: jason@bloom.us

# TO MY FUTURE SELF
# WHOSE MEMORY WILL STRUGGLE TO REMEMBER HOW THIS THING WORKS
# TOC MORE OR LESS:
# SCRIPT AND SHELL SETTINGS
# ENVIRONMENT SETTINGS
# DEFAULTS
# BASIC LOGGING FUNCTIONS
# HELPER FUNCTIONS
# PARAMETER PROCESSING FUNCTIONS
# SUBCOMMAND FUNCTIONS AND SUBFUNCTIONS
# MAIN ENTRY AND CONTROL

# SCRIPT AND SHELL SETTINGS

# bash makin-it-hard settings
set -o errexit
set -o nounset
set -o pipefail

# SOURCE DIR NAMES TO MANAGE
_dsinkSourceDirs=(studio lab office house library)

# REQUIRED EXTERNAL COMMANDS
_requiredCommands=(rsync cryptsetup lsblk parted wipefs)

# ENVIRONMENT SETTINGS

# debugging and logging settings
# script debug toggle (set to true to enable default global debugging)
_DEBUG=false
# silent mode for scripting (supresses normal output)
_SILENT=false
# logging facility (debug always goes here, unless)
_LOG=true

# some color
red=$(tput setaf 1)
boldred=$(tput bold; tput setaf 1)
green=$(tput setaf 2)
cyan=$(tput setaf 6)
yellow=$(tput setaf 3)
prompt=$(tput setab 5; tput setaf 7)
reset=$(tput sgr0)
label=$(tput setab 7; tput setaf 0)

# DEFAULT SETTINGS

# store dsink state and logs in $HOME/dsink
_dsinkDirName=dsink
_dsinkDir="$(dirname ~/.)/${_dsinkDirName}"
_dsinkConf="${_dsinkDir}/dsink.conf"
_logFile="${_dsinkDir}/dsink.log"
_dsinkCatalog="${_dsinkDir}/catalog"
_dsinkMedia="${_dsinkCatalog}/media"
_dsinkMount="${_dsinkDir}/mount"

# global variables we use
# _findNewDisk: declare -g _newDiskDevice

_prompt() {
	# hack to avoid fixing _log and include a PROMPT type
	# TODO: add this idea into _log to keep the "universal" claim
	echo -n "${prompt}USER${reset}: ${1} "
}

# LOGGING 

_log() {
	# global prompt and logging function
	# consults _DEBUG _SILENT and _LOG for behavior
	# TODO: add type for user PROMPT (ie USER interaction)
	# TODO: try and optimize...many calls for each log event (although the use
	# would never be bogged down since this is a single user system)
	# levels:
	# 0=debug eg: _log 0 "func(): value x was found and changed into x2"
	# 1=info eg: _log 1 "main(): set parameters to x y and z"
	# 2=warn eg: _log 2 "func(): doing y because the force flag was set"
	# 3=error eg: _log 3 "main(): non-fatal error, will continue trying"
	# 4=fatal eg: _log 4 "main(): fatal error, quitting"
	# ARG1 = log level (can be overridden by setting _logLevelOverride)
	# prints 1-3 no matter what, unless _LOG is false and/or _SILENT is true (and
	# there are functions (eg _format) that should never be SILENT)
	# set to 0 to force all logs into DEBUG pipeline
	local _logLevelOverride=
	local _logLevel=${_logLevelOverride:-$1}
	local _logMessage="${@:2}"
	local _canLog=false
	# set timestamp for log message (unix seconds)
	local _timeStamp=$(date +%s)
	# define log levels and colors
	# TODO: fix this...not using it as designed
	declare -A _i=([0]=DEBUG [1]=INFO [2]=WARN [3]=ERROR [4]=FATAL)
	declare -A _c=([0]=cyan [1]=green [2]=yellow [3]=red [4]=boldred)
	local _level=${_i[${_logLevel}]}
	local _color=${_c[${_logLevel}]}
	# check if a logfile exists
	# this could be a global VAR
	[ -f "${_logFile}" ] && _canLog=true
	# if debug is false and message level is 0, stop
	[  ${_DEBUG} = false ] && [ ${_logLevel} = 0 ] && return
	# if _LOG is true and _logFile exists, print to log
	[ ${_LOG} = true ] && [ ${_canLog} = true ] && \
		 printf "%s\n" "${_timeStamp} ${_level}: ${_logMessage}" >> "${_logFile}"
	# if silent is true, don't print anything to the console and stop
	# BUG HERE
	# if SILENT is true and _log = 4, then we don't exit as expected on FATAL
	# error
	if [ ${_SILENT} = true ] && [ ${_logLevel} = 4 ]; then
		exit 1
	elif [ ${_SILENT} = true ]; then
		return
	fi
	# if _SILENT is false, prettyPrint to console based on level
	if [ ! ${_SILENT} = true ]; then
		[ ${_DEBUG} = true ] && [ ${_logLevel} = 0 ]  && \
			echo "${cyan}DEBUG${reset}: ${_logMessage}" && return
		[ ${_logLevel} = 1 ] && \
			echo "${green}INFO${reset}: ${_logMessage}" && return
		[ ${_logLevel} = 2 ] && \
			echo "${yellow}WARN${reset}: ${_logMessage}" && return
		[ ${_logLevel} = 3 ] && \
			echo "${red}ERROR${reset}: ${_logMessage}" && return
		[ ${_logLevel} = 4 ] && \
			echo "${boldred}FATAL${reset}: ${_logMessage}" && exit 1
	fi
}


# HELPER FUNCTIONS

_printUsage () {
  cat << EOF

usage: dsink [OPTIONS] command [OPTIONS]

options:
 -h      print this usage info
 -l      log commands and debug info to log file
 -d      print debug info to stdout and/or log
 -s      suppress all stdout/stderr
 -v      print version number and exit

commands:
 backup              synchronize defined local contents to mounted usb
 restore             reverse synchronize from usb to local device
 format              format a new usb portable device
 mount               open and mount usb device
 unmount             unmount and close usb device
 status              report on replication level status
 report              full report on replication level and media catalog

for command specific usage, eg:
$ dsink help backup

EOF
}

_printInfo () {
  cat << EOF

dsink maintains data replication of local data onto removable
usb devices which it encrypts (with luks).

EOF
}

# PARAMETER PROCESSING FUNCTIONS

_getOpts () {
	# check for global command flags and set VARS accordingly
	local OPTIND
	_log 0 "${FUNCNAME[0]}: positional parameters read: $*"
	while getopts ":hsdlv" flag ; do
		_log 0 "${FUNCNAME[0]}: OPTIND=$OPTIND flag=$flag"
		case ${flag} in 
			h)
				_printInfo ; _printUsage; exit 0
				;;
 	    s)
				_log 0 "${FUNCNAME[0]}: enabling silent mode"
 	      _SILENT=true
				;;
			d)
				_DEBUG=true
				_log 0 "${FUNCNAME[0]}: enabled debug mode"
				;;
			l)
				_LOG=true
				_log 0 "${FUNCNAME[0]}: enabled log mode"
				;;
			v)
				echo "${green}verion${reset}: beta"; exit 0
				;;
			?)
				echo "${red}ERROR${reset}: invalid global option: -$OPTARG"; exit 1
				;;
		esac
	done
	shift $((OPTIND - 1))
	# export a paired down parameter string flags and args read within this
	# function will be discarded, leaving behind only that which the rest needs
	export _workingParams=$*
	_log 0 "${FUNCNAME[0]}: _LOG=${_LOG}"
	_log 0 "${FUNCNAME[0]}: _SILENT=${_SILENT}"
	_log 0 "${FUNCNAME[0]}: _DEBUG=${_DEBUG}"
	return
}

_getSubcommand() {
	# look for the first subcommand and set _subCommand accordingly
	while ((${#})); do
		_log 0 "${FUNCNAME[0]}: reading parameter '${1}'"
		case $1 in
			help)
				_printInfo ; _printUsage; exit 0
				;;
			backup)
				_log 0 "${FUNCNAME[0]}: '$1' called, checking for backup flags now"
				_subCommand=$1
				_getBackupOpts
				return
				;;
			restore)
				_log 0 "_getSubcommand(): '$1' called, check for restore flags"
				_subCommand=$1
				return
				;;
			format)
				_log 0 "_getSubcommand(): '$1' called, check for format flags"
				_subCommand=$1
				_getFormatOptions
				return
				;;
			mount)
				_log 0 "_getSubcommand(): '$1' called, check for mirror flags"
				_subCommand=$1
				return
				;;
			unmount)
				_log 0 "_getSubcommand(): '$1' called, check for mirror flags"
				_subCommand=$1
				return
				;;
			status)
				_log 0 "_getSubcommand(): '$1' called, check for mirror flags"
				_subCommand=$1
				return
				;;
			report)
				_log 0 "_getSubcommand(): '$1' called, check for mirror flags"
				_subCommand=$1
				return
				;;
			test)
				_log 0 "_getSubcommand(): '$1' called, check for format flags"
				_subCommand=$1
				_getTestOptions
				return
				;;
			*)
				_log 4 "_getSubcommand(): '$1' is not a subcommand"
				;;
		esac
		shift
	done
}	


#_requiredCommands=(rsync cryptsetup lsblk parted)
_isEnvSufficient() {
	# check for required tools, report accordingly
	local _sufficient=true
	for _required in "${_requiredCommands}"; do
		if ! hash "${_required}" 2>/dev/null; then
			_log 3 "${FUNCNAME[0]}: ${_required} not found"
			_sufficient=false
		fi
	done
	# check for dsink dir
	if [ ! -d "${_dsinkDir}" ]; then
		_log 2 "${FUNCNAME[0]}: no ${_dsinkDir}, creating now"
 		mkdir -p "${_dsinkMount}" || _log 4 "${FUNCNAME[0]}: cannot make ${_dsinkDir}"
		touch "${_dsinkConf}" "${_logFile}"
		mkdir -p "${_dsinkCatalog}"
		mkdir -p "${_dsinkMedia}"
	fi
	[ ${_sufficient} = true ] && return 0 || return 1
}


# SUBCOMMAND FUNCTIONS AND SUBFUNCTIONS
_getBackupOpts() {
	# check for backup flags and args
	local OPTIND=1
	set -- ${_workingParams}
	_log 0 "${FUNCNAME[0]}: positional parameters read: $*"
	shift
	while getopts ":r" flag "$@"; do
		case ${flag} in
			r)
				# future option to use when we want to do an rsync force refresh, eg
				_refresh=true
				_log 1 "${FUNCNAME[0]}: refresh mode enabled"
				;;
			?)
				_log 3 "${FUNCNAME[0]}: unknown flag -$OPTARG"; exit 1
				;;
		esac
	done
	shift $((OPTIND - 1))
	export _workingParams=$*
}

_getFormatOptions() {
	local OPTIND=1
	set -- ${_workingParams}
	_log 0 "${FUNCNAME[0]}: positional parameters read: $*"
	shift
	while getopts ":f" flag "$@"; do
		case ${flag} in
			f)
				_forceFormat=true
				_log 1 "${FUNCNAME[0]}: force mode enabled"
				;;
			?)
				_log 3 "${FUNCNAME[0]}: unknown flag -$OPTARG"; exit 1
				;;
		esac
	done
	shift $((OPTIND - 1))
	export _workingParams=$*
}

_getTestOptions() {
	local OPTIND=1
	set -- ${_workingParams}
	_log 0 "${FUNCNAME[0]}: positional parameters read: $*"
	shift
	while getopts ":f" flag "$@"; do
		case ${flag} in
			f)
				_forceFormat=true
				_log 1 "${FUNCNAME[0]}: force mode enabled"
				;;
			?)
				_log 3 "${FUNCNAME[0]}: unknown flag -$OPTARG"; exit 1
				;;
		esac
	done
	shift $((OPTIND - 1))
	export _workingParams=$*
}
	

# SUB COMMANDS
#backup              synchronize defined local contents to mounted usb
#restore             reverse synchronize from usb to local device
#format              format a new usb portable device
#mount               open and mount usb device
#unmount             unmount and close usb device
#status              report on replication level status
#report              full report on replication level and media catalog

_backup() {
	# rsync from local source to mounted usb destination
	echo "backup from here to usb happening..."
	_rsyncDest="${_dsinkMount}"/rsync/
	echo "backup from $HOME/studio to ${_rsyncDest}"
	rsync -a $HOME/studio/ "${_rsyncDest}"
}

_format() {
	_findNewDisk || _log 4 "no new disk found" && _log 1 "found ${_newDiskDevice}"
	_printDiskInfo "${_newDiskDevice}"
	_prompt "is ${green}${_newDiskDevice}${reset} the desired disk? [type YES to proceed] "
	read -r -s -t 15 -n 3 _YES ; echo
	if [[ "${_YES}" != "YES" ]]; then
		_log 4 "uppercase YES is required, try again"
	fi
	local _newDsinkDisk="${_newDiskDevice}"
	local _newDsinkDiskPartition="${_newDsinkDisk}1"
	_doWritePartition "${_newDsinkDisk}" || _log 4 "failed to write partition on ${1}"
	_ptuuid=$(_getPTUUID ${_newDsinkDisk}) || _log 4 "could not get disk id"
	if [ -d "${_dsinkCatalog}"/media/"${_ptuuid:0:3}" ]; then
		# disk id already exists
		_log 3 "disk id ${_ptuuid:0:3} collided"
		while [ -d "${_dsinkCatalog}"/media/"${_ptuuid:0:3}" ]; do
			_doWritePartition "${_newDsinkDisk}" _log 4 "failed to rewrite partition with unique id on ${1}"
		done
	fi
	_log 0 "ptuuid=${_ptuuid}"
	_log 0 "disk id is ${_ptuuid:0:3}"
	mkdir "${_dsinkCatalog}"/media/"${_ptuuid:0:3}"
	touch "${_dsinkCatalog}"/media/"${_ptuuid:0:3}"/"${_ptuuid:3}"
	_isDeviceReady "${_newDsinkDisk}" || _log 4 "${_newDsinkDevice} not ready"
	# note: waiting on devices is tricky
	# watch -n0.1 -be ls -l /dev/sda1
	_isDeviceReady "${_newDsinkDisk}"1 || _log 4 "${_newDsinkDisk}1 not ready"
	_log 1 "encrypting ${_newDsinkDisk}1 now..."
	_doEncrypt "${_newDsinkDisk}"1 && touch "${_dsinkCatalog}"/media/"${_ptuuid:0:3}"/encrypted
	_log 1 "writing filesystem now..."
	_doMakeFS && touch "${_dsinkCatalog}"/media/"${_ptuuid:0:3}"/ready
	_mount && touch "${_dsinkCatalog}"/media/"${_ptuuid:0:3}"/mounted
	_log 1 "dsink device is ready and mounted"
	_log 1 "label new dsink device as ${label}${_ptuuid:0:3}${reset} now"
}

# disk media catalog
# 1. DIR disk id: $_ptuuid:0:3
# 2. TOUCH remaining ptuuid
# 3. file size to contain disk size
# other attributes
# nickname
# status (in-use, lost, corrupted, destroyed)

_doMakeFS() {
	# no args...always write to the mapper device
	until ls /dev/mapper/dsink &>/dev/null; do
		echo -n "waiting on /dev/mapper/dsink"
		sleep 0.1
	done
	sudo mkfs.ext4 -q /dev/mapper/dsink -L dsink
}

_doEncrypt() {
	# arg 1 = partition (eg /dev/sda1)
	# encrypt the device with luks, then open the device
	sudo cryptsetup luksFormat --verify-passphrase --batch-mode ${1}
	_log 1 "${1} encrypted, opening the device..."
	sudo cryptsetup luksOpen ${1} dsink
}

_doWritePartition() {
	# arg 1 = /dev/sda
	# 
	_isBlockDevice ${1} || _log 4 "${1} is not a block device"
	_isDeviceWritable ${1} || _log 4 "${1} is not ready"
	sudo wipefs --all ${1} &>/dev/null || _log 4 "failed to wipefs ${1}"
	sudo parted -s ${1} mklabel gpt
	sudo parted -s ${1} mkpart dsink 1 100%
	_getPTUUID ${1} &>/dev/null || return 1
}

_status() {
	echo "STATUS:${green} OK${reset} (this a fake result)"
	exit 0
}

_test() {
	# convenient function for use in testing things during development
	_isDeviceReady $_workingParams || _log 4 "${_workingParams} is not ready"
	_isBlockDevice $_workingParams
	#_findNewDisk || _log 4 "no new disk found" && _log 1 "found ${_newDiskDevice}"
	#_isBlockDevice $_workingParams && echo BLOCK || echo NOT BLOCK
}

_isBlockDevice() {
	# arg1 = disk device to check (eg /dev/sda)
	# return 0 if true, 1 if false
	#[ -b ${1:-null} ]
	until [ -b ${1:-null} ]; do
		sleep 0.1
		echo "waiting on block device ${1}"
	done
}

_isDeviceReady() {
	# a little hacky way of waiting on the disk before probing
	# arg1 = disk device to check (eg /dev/sda)
	# checks for group=disk (which seems to be necessary)
	# NOTE: this function will hang indefinitely if the device never appears
	# it also relies on the /sys filesystem
	_isBlockDevice $1 || return 1
	until [ $(stat -c "%G" ${1}) = "disk" ]; do
		sleep 0.1
	done
	_isDeviceWritable $1 || _log 4 "device $1 not writable"
	#_getPartitionList $1 &>/dev/null || _log 4 "no partitions detected on $1"
	return 0
}

_isDeviceWritable() {
	if stat -c "%a" $1 | grep ".[67.]" &>/dev/null; then
		return 0
	else
		return 1
	fi
}

_getPTUUID() {
	# ARG1 = sd device (eg /dev/sda)
	# the PTUUID is cataloged into dsink.disks at the time of format
	# return 1 if no device or not block
	# return 2 if no PTUUID found
	# echo the whole disk partition table UUID if found
	#local _rawDevice=${1}
	#_isBlockDevice $_rawDevice || return 1
	local _PTUUID=$(lsblk -Sn -oPTUUID ${1} 2>/dev/null)
	if [ -z "$_PTUUID" ]; then
		return 1
	else
		echo "$_PTUUID"
	fi
}

_isDiskDsink() {
	# arg 1 = disk device (/dev/sda)
	# if PTTYPE = gpt
	# if partition 1 PARTLABEL = dsink
	# return 0 if true, 1 if disk is not a dsink device (must have 1 part labeled
	# dsink)
	if [[ $(lsblk -nS -oPTTYPE ${1}) == "gpt" ]]; then
		if _getPartitionList ${1} &>/dev/null; then
			if [[ $(lsblk -n -oPARTLABEL ${1}1) == "dsink" ]]; then
				return 0
			fi
		else
			return 1
		fi
	else
		return 1
	fi
}

_findMounts() {
	_devicePartitionList=$(_getPartitionList ${1}) || return 1
	_t=5000
	declare -A _parts
	for p in ${_devicePartitionList}; do
		_device=/dev/${p}
		if _p_status=$(findmnt -n -oTARGET $_device); then
			_parts[${_device}]=${_p_status}
		else
			findmnt --poll=mount --first-only --timeout=${_t} ${_device} &>/dev/null &
			_parts[${_device}]=$!
		fi
	done
	wait
	for m in "${!_parts[@]}"; do
		if [[ "${_parts[${m}]}" == /* ]]; then
			findmnt -S ${m} -oSOURCE,SIZE,AVAIL,USED,USE%,TARGET
		elif [[ "${_parts[${m}]}" =~ ^[0-9] ]]; then
			if _m_check=$(findmnt -n -oTARGET $m); then
				findmnt -S ${m} -oSOURCE,SIZE,AVAIL,USED,USE%,TARGET
			else
				echo "$m ${yellow}unmounted${reset}"
			fi
		else
			_log 4 "${m} did not return an expected value "
		fi
	done
}

_waitForMounts() {
	# arg 1 = disk name (eg sda)
	# find the partitions of a disk
	_devicePartitionList=$(ls /sys/block/${1}/*/partition | cut -f5 -d/ | tr '\n' ' ')
	_t=5000
	for part in ${_devicePartitionList}; do
		findmnt --poll=mount --first-only --timeout=$_t /dev/$part &>/dev/null &
	done
	wait
}

_printMountInfo() {
	# job: discover and print filesystem details of specified whole disk
	# filesystem, mount state, and if empty
	# arg 1 = whole disk device file (eg /dev/sda)
	_partList=$(_getPartitionList "${1}") || _log 4 "no partitions"
	_log 1 "partitions on ${_dev}: ${_partList}"
}

_getPartitionList() {
	# for a given disk, discover how many partitions
	# return the list (eg 'sda1 sda2')
	# return 1 if none or error
	# arg 1 = whole disk device file
	_x=$(lsblk -n -l "${1}" | tail -n +2 | cut -f1 -d' ' | tr '\n' ' ')
	if [ -z "${_x}" ]; then
		return 1
	else
		echo "${_x}"
	fi
}

_printDiskInfo() {
	# arg1 = whole disk device file (ie /dev/sda)
	# get device info and print it in human readable form
	_dev=${1##*/}
	#_isBlockDevice $1 || _log 4 "$1 is not a block device"
	_isDeviceReady $1 || _log 4 "$1 is not ready"
	_isDeviceWritable $1 || _log 4 "$1 is not writable"
	udevadm settle
	echo -e "\n==============PHYSICAL:========================================"
	lsblk -S -oNAME,SIZE,VENDOR,PTTYPE,PTUUID ${1}
	echo -e "\n==============LOGICAL:========================================="
	if _getPartitionList ${1} &>/dev/null; then
		lsblk -oNAME,SIZE,PARTLABEL,FSTYPE,UUID ${1}
	else
		echo -e "\n NO PARTITIONS ON DISK"
		# TODO this is broken...when a key has a partition table but no partitions
		# it croaks
	fi
	echo -e "\n==============STATE:==========================================="
	if _isDiskDsink "${1}"; then
		_checkMount && _log 3 "dsink mounted...${1}...i think"
		if _PTUUID=$(_getPTUUID ${1}); then
			_log 2 "${1} is a dsink disk: ${_PTUUID}"
			if [ -d "${_dsinkCatalog}"/media/"${_PTUUID:0:3}" ]; then
				_log 4 "disk id ${label}${_PTUUID:0:3}${reset} already exists in the media catalog!!"
			fi
			return 0
		else
			_log 2 "${1} looks like a dsink disk, but has no PTUUID"
			echo "require some override here"
			return 1
		fi
	else
		# disk is not a dsink device
		if ! _getPartitionList ${1} &>/dev/null; then
			_log 2 "disk is without partitions"
			return 0
		fi
	fi
	_findMounts "${1}"
	echo
}
	
_irishExit() {
	echo -ne "\r${yellow}WARNING${reset}: to retry, press R, to quit, press ENTER\n"
	read -s -t 15 -n 1 _ANS
	if [[ ${_ANS:-n} = 'R' ]]; then
		return
	else
		_log 4 "user requested exit with ctrl-c"
	fi
}

_findNewDisk() {
	# job: look at devices before, prompt user to insert new disk, identify the
	# newly inserted disk, then set the name of the device (eg /dev/sda) as a
	# global VAR=/dev/sda
	# return 1 if no new disks found
	# no args taken
	# naturally interactive...requires user engagement
	# NOTE: _SILENT=true must be ignored for this function...need to resolve this,
	# although it still works in silent mode since no user key input is required
	# NOTE: because this is interactive, we cannot pass the value back with echo
	# AND interact with the user since it would require a subshell...which waits
	# on the command (function) to complete before the output is set...ie, we need
	# to use a global VAR to pass the one result (the device file name) back.
	# the method is not ironclad...but it works by watching the /sys/block
	# namespace for changes.
	local _usbDisksBefore=($(ls /sys/block))
	local _countBefore=${#_usbDisksBefore[@]}
	local _usbDisksAfter
	local _countAfter
	local _newInsertedUsbDisk
	declare -g _newDiskDevice
	local _attempts=3
	_log 1 "insert usb drive now...hit CTRL-C to exit"
	trap _irishExit SIGINT
	while [ ${_attempts} -gt 0 ]; do
		_log 1 "looking for new device..."
		if watch -n 0.1 -g ls /sys/block &>/dev/null; then
			_usbDisksAfter=($(ls /sys/block))
			_countAfter=${#_usbDisksAfter[@]}
			if [[ ${_countAfter} -gt ${_countBefore} ]]; then
				break
			elif [[ ${_countAfter} -lt ${_countBefore} ]]; then
				_log 3 "device disappeared...insert new device now"
				# re-gather the device list
				_usbDisksBefore=($(ls /sys/block))
				((_countBefore--))
				((_attempts--))
			fi
		fi
	done
	_log 0 "block devices before: [${#_usbDisksBefore[@]}] '${_usbDisksBefore[@]}'" 
	_log 0 "block devices after: [${#_usbDisksAfter[@]}] '${_usbDisksAfter[@]}'" 
	# determine the new device by comparing before and after lists
	[[ ${_countBefore} == ${_countAfter} ]] && return 1
	for i in "${_usbDisksAfter[@]}"; do
		skip=
		for x in "${_usbDisksBefore[@]}"; do
			[[ $i == $x ]] && { skip=1; break; }
		done
			[[ -n $skip ]] || _newInsertedUsbDisk=$i
	done
	_newDiskDevice="/dev/${_newInsertedUsbDisk}"
}

_unmount() {
	# unmount fs, close luks device, notify device can be removed
	# must be interactive to allow sudo command
	# check for mount first
	_checkMount || _log 4 "no disnk device mounted"
	sudo umount "${_dsinkMount}" || _log 4 "${FUNCNAME[0]}: umount failed with err $?"
	sudo cryptsetup luksClose dsink || _log 4 "${FUNCNAME[0]}: luksClose failed with err $?"
	_log 1 "OK to remove usb device now"
}	

_mount() {
	# prompt use to insert dsink usb, open luks dsink, mount fs
	# check for mount first
	_detectedDsinkDevice=
	_checkMount && _log 4 "dsink device already mounted"
	#echo "insert dsink usb now"
	if [ -e /dev/disk/by-partlabel/dsink ]; then
		_log 1 "dsink partition detected"
		_detectedDsinkDevice=$(readlink -f /dev/disk/by-partlabel/dsink)
	else
		echo "no dsink partition available"
	fi
	if [ -n "${_detectedDsinkDevice}" ]; then
		if [ ! -e /dev/mapper/dsink ]; then
			sudo cryptsetup luksOpen ${_detectedDsinkDevice} dsink
		fi
		sudo mount /dev/mapper/dsink "${_dsinkMount}"
		sudo chown -R jason:jason "${_dsinkMount}"
	else
		echo "insert a dsink device and try again"
	fi
	# TODO this function needs reworking...
}

_checkMapperFile() {
	if [ -e /dev/mapper/dsink ]; then
		return 0
	else
		return 1
	fi
}

_findUnmountedDsink() {
	# search for a dsink device
	echo DO
}

_checkMount() {
	# check for mounted dsink device
	# return 0 for true, 1 for false
	if grep -qs "${_dsinkMount}" /proc/mounts; then
		return 0
	else
		return 1
	fi
}

main() {
	# validate the environment first
	_isEnvSufficient || _log 4 "${FUNCNAME[0]}: fulfill requirements before using"
	# what are we trying to do (read all the positional parameters and set VARS)
	_getOpts "${@}"
	_log 0 "${FUNCNAME[0]}: parameters read: ${@}"
	_log 0 "${FUNCNAME[0]}: paired-down parameters: $_workingParams"
	_getSubcommand $_workingParams
  # if run without arguments, run and print _status
	[ -z "${_subCommand:-}" ] && _status
	_log 0 "${FUNCNAME[0]}: _subCommand: $_subCommand"
	_log 0 "${FUNCNAME[0]}: remaining args: $_workingParams"
	# do it
	[ -n "${_subCommand:-}" ] && eval _"${_subCommand}"
}
main "${@}"

