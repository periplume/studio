#!/usr/bin/env bash
# file: epistle
# source: https://github.com/periplume/dotfiles.git
# author: jason@bloom.us
# SCRIPT AND SHELL SETTINGS
set -o errexit  # set -e
set -o nounset
set -o pipefail

###########################
# PREREQUISITES
###########################
 
# required commands
_requiredCommands=(git gitdisk dsink vipe fzf)

# recommended commands
_recommendedCommands=(git-sizer tig)

###########################
# ENVIRONMENT SETTINGS
###########################

# GLOBAL VARIABLES
# these never change in the context of a session
# these will be exported (in the case of fzf previews etc) 

# WORKING ENVIRONMENT
# _studioDirName is the umbrella or master namespace in which epistle operates
_studioDirName=studio
# germ lives inside studio (into which it is designed to publish)
_epistleDirName=epistle
# get the name of the script itself
self=$(basename $0)

# USER NAME
# the git username and email are used to create a short hash which identifies
# the user in the namespace.  it is set as a global variable and used in various
# places.  it can be overridden here.
#_user=e291

# BEHAVIOR

# debugging and logging settings
# script debug toggle (set to true to enable default global debugging)
_DEBUG=false
# silent mode for scripting (supresses all output)
_SILENT=false
# logging facility
_LOG=false

# OUTPUT

# some color
red=$(tput setab 1; tput setaf 7)
boldred=$(tput setab 1 ; tput setaf 7)
green=$(tput setaf 2)
cyan=$(tput setaf 6)
yellow=$(tput setaf 3)
reset=$(tput sgr0)
label=$(tput setab 7; tput setaf 0)
prompt=$(tput setab 5; tput setaf 7)

################################
# LOGGING AND CONSOLE MESSAGES
################################

# user output: types
# name		description														display
#----------------------------------------------------------------------------
# debug		verbose																cyan
# info		information only											blue text, green bg
# warn		warning (abnormal)										black text, yellow bg
# error		not allowed														white text, red bg
# fatal		error and exiting (out of trap)				black text, red bg, bold text?
# ask			ask user for input										white text, cyan bg
#	always expect fresh new line
# exception...after ask...in which case, take care of that immediately
# suppress if _SILENT=true
#
# call as
# _warn "message"
# _info "message"

# _fLOG creates logging functions based on
# the static features: (global variables)
#
# the three main determinants:
# _SILENT= true | false
# _LOG= true | false
# _DEBUG= true | false
#
# subordinate dependencies:
# _canLog= true | false
# _logFile= "path to file"
# $(tput colors)

_fLOG() {
	# collapsing function...sets up according to the static determinants
	# creates all log functions
	# _debug
	# _info
	# _warn
	# _error
	# _ask
	# log function usage as simple as:
	# _info "the message contents" 
	local _log=0
	local _console=0
	local _color=0
	[[ "$_SILENT" = "false" ]] && _console=1
	[[ "$_LOG" = "true" && "$_canLog" = "true" ]] && _log=1
	[[ $(tput colors) ]] && _color=1
	#
	# set up colors	
	_cDebug=$(tput setaf 6)
	_cInfo=$(tput setaf 2)
	_cWarn=$(tput setaf 11)
	_cError=$(tput setaf 1)
	_cAsk=$(tput setaf 0; tput setab 11)
	_cReset=$(tput sgr0)
	# create 5 log functions based on static determinants above
	# TODO use eval, assoc arrays and loops to build these functions with less
	# code...someday...for now, it works just fine
	# CONSOLE AND LOG
	if [[ $_console = 1 && $_log = 1 ]]; then
		_debug() {
			[[ "$_DEBUG" = "false" ]] && return
			local _timeStamp=$(date +%s.%N)
			printf '%s %s\n' "${_cDebug}DEBUG${_cReset}" "${@}"
			printf '%s %s %s\n' "$_timeStamp" "${self} ${_cDebug}DEBUG${_cReset}" "${@}" >>${_logFile}
		}
		_info() {
			local _timeStamp=$(date +%s.%N)
			printf '%s %s %s\n' "$_timeStamp" "${self} ${_cInfo}INFO${_cReset}" "${@}" >>${_logFile}
			# hack: below prints _info...multi-line messages are indented
			SAVEIFS=$IFS
			IFS=$'\n'
			_pList=(${1})
			IFS=$SAVEIFS
			if [[ ${#_pList[@]} -gt 1 ]]; then
				printf '%s %s\n' "${_cInfo}INFO${_cReset}" "${_pList[0]} "
				for (( i=1; i<${#_pList[@]}; i++ ))
				do
					printf "\t\t: %s\n" "${_pList[$i]} "
				done
			else
				printf "%s %s\n" "${_cInfo}INFO${_cReset}" "${1} "
			fi
		}
		_warn() {
			local _timeStamp=$(date +%s.%N)
			printf '%s %s\n' "${_cWarn}WARN${_cReset}" "${@}"
			printf '%s %s %s\n' "$_timeStamp" "${self} ${_cWarn}WARN${_cReset}" "${@}" >>${_logFile}
		}
		_error() {
			local _timeStamp=$(date +%s.%N)
			printf '%s %s\n' "${_cError}ERROR${_cReset}" "${@}"
			printf '%s %s %s\n' "$_timeStamp" "${self} ${_cError}ERROR${_cReset}" "${@}" >>${_logFile}
		}
		_ask() {
			local _timeStamp=$(date +%s.%N)
			printf '%s %s' "${_cAsk}USER${_cReset}" "${@}"
			#printf '%s %s %s\n' "$_timeStamp" "${self} ${_cAsk}USER${_cReset}" "${@}" >>${_logFile}
			# don't log prompts...if something is important, log as debug
		}
	# LOG ONLY
	elif [[ $_console = 0 && $_log = 1 ]]; then
		_debug() {
			[[ "$_DEBUG" = "false" ]] && return
			local _timeStamp=$(date +%s.%N)
			printf '%s %s %s\n' "$_timeStamp" "${self} ${_cDebug}DEBUG${_cReset}" "${@}" >>${_logFile}
		}
		_info() {
			local _timeStamp=$(date +%s.%N)
			printf '%s %s %s\n' "$_timeStamp" "${self} ${_cInfo}INFO${_cReset}" "${@}" >>${_logFile}
		}
		_warn() {
			local _timeStamp=$(date +%s.%N)
			printf '%s %s %s\n' "$_timeStamp" "${self} ${_cWarn}WARN${_cReset}" "${@}" >>${_logFile}
		}
		_error() {
			local _timeStamp=$(date +%s.%N)
			printf '%s %s %s\n' "$_timeStamp" "${self} ${_cError}ERROR${_cReset}" "${@}" >>${_logFile}
		}
		_ask() {
			:
			#local _timeStamp=$(date +%s.%N)
			#printf '%s %s %s\n' "$_timeStamp" "${self} ${_cAsk}USER${_cReset}" "${@}" >>${_logFile}
			# don't log _ask prompts
		}
	# CONSOLE ONLY
	elif [[ $_console = 1 && $_log = 0 ]]; then
		_debug() {
			[[ "$_DEBUG" = "false" ]] && return
			printf '%s %s\n' "${_cDebug}DEBUG${_cReset}" "${@}"
		}
		_info() {
			printf '%s %s\n' "${_cInfo}INFO${_cReset}" "${@}"
		}
		_warn() {
			printf '%s %s\n' "${_cWarn}WARN${_cReset}" "${@}"
		}
		_error() {
			printf '%s %s\n' "${_cError}ERROR${_cReset}" "${@}"
		}
		_ask() {
			printf '%s %s' "${_cAsk}USER${_cReset}" "${@}"
		}
	else
		# do nothing
		_debug() { : ; }
		_info() { : ; }
		_warn() { : ; }
		_error() { : ; }
		_ask() { : ; }
	fi
	export -f _debug
	export -f _info
	export -f _warn
	export -f _error
	export -f _ask
}
# create the log functions now...update them later
# this logic may need to be reconsidered
_fLOG


####################################
# HELPER FUNCTIONS
####################################

_printUsage () {
  cat << EOF

usage: epistle [OPTIONS] <command> [OPTIONS]

options:
 -h      print this usage info
 -l      log commands and debug info to log file
 -d      print debug info to stdout and/or log
 -s      suppress all stdout/stderr
 -v      print version number and exit

alternate env settings:
 -a <name>  set the germ dir name to <name>
 -w <name>  set the master studio dir to <name> (assumes \$HOME/<name>)

commands:
 new                 start a new letter
 edit                edit an existing letter
 print               print a letter to send
 list                list the letters per state 
 mark                mark the status of a letter (as sent, etc)
 inspect             run tig on the epistle repo
 sizer               run github sizer tool on epistle repo 
 import              import files into the repo

EOF
}

_printInfo () {
  cat << EOF

epistle manages all aspects of letter writing, except the writing, the
envelope, and the stamp

EOF
}

####################################
# PARAMETER PROCESSING FUNCTIONS
####################################

_getOpts () {
	# check for global command flags and set VARS accordingly
	local OPTIND
	# make the original environment available to _shell for calling back into main
	export _originalParameters=${*}
	_debug "${FUNCNAME}: positional parameters read: $*"
	while getopts ":hsdlva:w:" flag ; do
		_debug "${FUNCNAME}: OPTIND=$OPTIND flag=$flag"
		case ${flag} in 
			h)
				_printInfo ; _printUsage; exit 0
				;;
     a)
        export _epistleDirName=$OPTARG
        # TODO find a better way of avoiding using key words as OPTARGs
        [[ $OPTARG =~ add|edit|create|print ]] && { _error "'$OPTARG' not allowed as name for -$flag"; exit 1; }
        _debug "using alternative epistle name '$_epistleDirName'"
        ;;
      w)
        export _studioDirName=$OPTARG
        [[ $OPTARG =~ add|edit|create|print ]] && { _error "'$OPTARG' not allowed as name for -$flag"; exit 1; }
        _debug "using alternative studio name '$_studioDirName'"
        ;;

 	    s)
				_debug "${FUNCNAME}: enabling silent mode with flag -$flag"
 	      export _SILENT=true
				;;
			d)
				_debug "${FUNCNAME}: enabled debug mode with flag -$flag"
				export _DEBUG=true
				;;
			l)
				_debug "${FUNCNAME}: enabled log mode with flag -$flag"
				export _LOG=true
				;;
			v)
				_info "${green}verion${reset}: beta"; exit 0
				;;
			?)
				_error "invalid global option: -$OPTARG"; exit 1
				;;
		esac
	done
	shift $((OPTIND - 1))
	# export a paired down parameter string flags and args read within this
	# function will be discarded, leaving behind only that which the rest needs
	export _workingParams=$*
	_debug "${FUNCNAME}: _LOG=${_LOG}"
	_debug "${FUNCNAME}: _SILENT=${_SILENT}"
	_debug "${FUNCNAME}: _DEBUG=${_DEBUG}"
	return
}

_getSubcommand() {
	# look for the first subcommand and set _subCommand accordingly
	while ((${#})); do
		_debug "${FUNCNAME}: reading parameter '${1}'"
		case $1 in
			help)
				_printInfo ; _printUsage; exit 0
				;;
			new)
				_debug "${FUNCNAME}: '$1' called, checking for $1 flags now"
				_subCommand=$1
				_getAddOpts
				return
				;;
			edit)
				_debug "${FUNCNAME}: '$1' called, checking for $1 flags"
				_subCommand=$1
				#_getEditOpts
				return
				;;
			list)
				_debug "${FUNCNAME}: '$1' called"
				_subCommand=$1
				return
				;;
			create)
				_subCommand=$1
				return
				;;
			inspect)
				_subCommand=$1
				return
				;;
			sizer)
				_subCommand=$1
				return
				;;
			test)
				_subCommand=$1
				return
				;;
			mark)
				_subCommand=$1
				echo "todo: mark a letter as sent"
				;;
			import)
				_debug "${FUNCNAME}: '$1' called"
				_subCommand=$1
				_getImportOptions
				return
				;;
			*)
				_error "${FUNCNAME}: '${1}' is not a subcommand"
				return 1
				;;
		esac
		shift
	done
}

_setEnv() {
	# set (and print) the environment
	#_info "setting up environment now"
	export _studioDir="$(dirname ~/.)/${_studioDirName}"
	export _epistleDir="${_studioDir}/${_epistleDirName}"
	export _epistleGitDisk="${_epistleDir}/.git"
	export _logFile="${_epistleDir}/epistle.log"
	export _git="--git-dir=${_epistleGitDisk}"
	export _gitWT="--git-dir=${_epistleGitDisk} --work-tree=${_epistleDir}"
	[[ -f "${_logFile}" ]] && _canLog=true || _canLog=false
	export _canLog
	_debug "self=$self"
	_debug "_studioDirName=$_studioDirName"
	_debug "_studioDir=$_studioDir"
	_debug "_epistleDirName=$_epistleDirName"
	_debug "_epsitleDir=$_epistleDir"
	_debug "_epistleGitDisk=$_epistleGitDisk"
	_debug "_logFile=$_logFile"
	_debug "_gitWT=$_gitWT"
	_debug "_git=$_git"
	_debug "git version= $(git $_git -v)"
	_debug "_canLog=${_canLog:-false}"
	_debug "_user=${_user:-unset}"
	_debug "_DEBUG=$_DEBUG"
	_debug "_SILENT=$_SILENT"
	_debug "_LOG=$_LOG"
	_debug "git command: 'git ${_git}'"
	_debug "gitWT command: 'git ${_gitWT}'"
}

_isEnvSufficient() {
	# check for required tools, report accordingly
	# TODO add recommended checks with _missing{0:name,1:name}
	local _sufficient=true
	for _required in "${_requiredCommands[@]}"; do
		if ! hash "${_required}" 2>/dev/null; then
			_warn "${FUNCNAME}: ${_required} not found"
			_sufficient=false
		else
			_debug "${FUNCNAME}: ${_required} found"
		fi
	done
	# check for germ dir (unless we are running create)
	if [ ! -d "${_epistleDir}" ]; then
		if [ -z "${_subCommand:-}" ]; then
			_error "found no ${_epistleDir}; run 'epistle create' first"
		 	return 1
		elif [ ! ${_subCommand:=} = "create" ]; then
			_error "found no ${_epistleDir}; run 'epistle create' first"
			_sufficient=false
		fi
	fi
	[ ${_sufficient} = true ] && return 0 || return 1
}

#################################
# SUBCOMMAND OPTION PROCESSING
#################################

_getAddOpts() {
	# check for _add() flags and args
	local OPTIND=1
	set -- ${_workingParams}
	_debug "${FUNCNAME}: positional parameters read: $*"
	shift
	while getopts ":d:" flag "$@"; do
		case ${flag} in
			d)
				# specify alternate date (rather than today)
				_debug "alternate date specified=$OPTARG"
				_altDate="${OPTARG}"
				;;
			?)
				 _error "${FUNCNAME}: unknown flag -$OPTARG"; exit 1
				;;
		esac
	done
	shift $((OPTIND - 1))
	export _workingParams=$*
}

_getImportOptions() {
	local OPTIND=1
	set -- ${_workingParams}
	_debug "${FUNCNAME}: positional parameters read: $*"
	shift
	while getopts ":m:" flag "$@"; do
		case ${flag} in
			m)
				# merge another epistle repo into this
				_debug "import merge $OPTARG"
				_importRepo="${OPTARG}"
				;;
			?)
				 _error "${FUNCNAME}: unknown flag -$OPTARG"; exit 1
				;;
		esac
	done
	shift $((OPTIND - 1))
	export _workingParams=$*
}

_getEditOptions() {
	local OPTIND=1
	set -- ${_workingParams}
	_debug "${FUNCNAME}: positional parameters read: $*"
	shift
	while getopts ":f" flag "$@"; do
		case ${flag} in
			f)
				_forceFormat=true
				_warn "${FUNCNAME}: force mode enabled"
				;;
			?)
				_error "${FUNCNAME}: unknown flag -$OPTARG"; exit 1
				;;
		esac
	done
	shift $((OPTIND - 1))
	export _workingParams=$*
}


####################################
# HEALTH AND STATUS
####################################

_sizer() {
	cd ${_epistleGitDisk}
	git-sizer --verbose
}

_inspect() {
	tig -C${_epistleDir}
}

_isIndexClean() {
	# radical departure here...use intent/ as pre-commit working
	# directory...make vim auto-save files there...etc
	git ${_git} diff-index --quiet --cached main 2>&1 >/dev/null || return 1
}

_isBufferClean() {
	# checks for files left in intent/ (ie vim swp)
	[[ -z "$(ls ${_epistleDir}/intent)" ]]
}

##################################
# NEW
##################################

_validateName() {
	# function to validate the format of the recipient's name
	# rules: upper, lower, and digits allowed
	# space, dot, dash, comma, and apostrophe	allowed
	# first must be letter (upper or lower)
	# last must be letter or number
	# space and non-alpha-numeric characters cannot repeat
	# IRS allows ampersand and dash
	# names allow apostrophe, hyphen, period, space
	# arg 1 = name to evaluate
	local _valid=true
	local _lenLimit=60
	[[ "${1}" =~ ^[[:upper:]|[:lower:]] ]] || \
		{ _warn "name '${1}' must begin with a letter"; _valid=false; }
	[[ "${1}" =~ [[:alnum:]]$ ]] || \
		{ _warn "name '${1}' must end with letter or number"; _valid=false; }
	[[ ! "${1}" =~ ([.]|[-]|[,]|[\']){2} ]] || \
		{ _warn "non-alphanumeric [.-,'] characters mustn't repeat"; _valid=false; }
	[[ ! "${1}" =~ ([ ]){2} ]] || \
		{ _warn "space character mustn't repeat"; _valid=false; }
	[[ "${1}" =~ ^([[:alnum:]]|[-,.\' ])*$ ]] || \
		{ _warn "allowed characters: letters, numbers, comma, dot, dash, apostrophe"; _valid=false; }
	[[ ${#1} -le ${_lenLimit} ]] || \
		{ _warn "length (${#1}) exceeds length limit of ${_lenLimit}"; _valid=false; }
	[[ $_valid = true ]] || return 1
}

_new() {
	# create a new letter
	local _recipient
	local _time=$(date +%s)
	# if the -d flag was used to specify the date, it is used to name the file and
	# placed in the date field of the letter
	_date=${_altDate:-$(date --date=@${_time} +%d-%m-%Y)}
	if [[ -z ${_altDate:-} ]]; then
		_dateHuman="$(date --date=@${_time} '+%d %b %Y')"
	else
		_dateHuman=${_altDate}
	fi
	local _key
	local _state
	local _path
	if [[ -z ${_workingParams} ]]; then
		_recipient=$(_listRecipients)
	#	while IFS='' read -d $'\n' -r -p "$(_ask "new epistle addressed ${yellow}to whom${reset}? [f to find] ")" -e _recipient; do
#			case "${_recipient}" in
#				h|help|\?)
#					_info "enter the name of the person to whom the letter shall be addressed"
#					;;
#				q)
#					_info "try again later when you know to whom you are writing"
#					return
#					;;
#				f)
#					_recipient=$(_listRecipients) && break || continue
#					;;
#				*)
#					[[ -z "${_recipient}" ]] && { _warn "empty name not allowed"; continue; }
#					break
#					;;
#			esac
#		done
	else
		_recipient=${_workingParams}
	fi
	_validateName "${_recipient}" || { _error "name '${_recipient}' not allowed"; return 1; }
	local _key="${_recipient}_${_date}"
	local _state="intent"
	local _path="${_epistleDir}/${_state}/${_key}"
	test -f "${_path}" && { _warn "intent exists"; return; }
	test -f "${_epistleDir}/draft/${_key}" && { _warn "draft '${_key}' exists; use edit"; return; }
	# seed the file
	local _header="$(printf "%60s\n\n%s,\\\n\\\n" "${_dateHuman}" "${_recipient}")"
	echo -e "${_header}" > "${_path}"
	vim "+normal G$" "${_path}"
	# check if anything was added to the seeded file
	if cmp -s "${_path}" <( echo -e "${_header}" ); then
		_warn "nothing to save"
		rm "${_path}"
		return
	else
		local _draft="${_epistleDir}/draft/${_key}"
		local _pathspec="draft/${_key}"
		mv "${_path}" "${_draft}"
		git -C "${_epistleDir}" --git-dir="${_epistleGitDisk}" add "${_pathspec}"
		git -C "${_epistleDir}" --git-dir="${_epistleGitDisk}" commit -q -m "saved draft to ${_recipient} (${_dateHuman})" "${_pathspec}" && _info "changes to '${_key}' saved" || _error "changes not saved!"
	fi
}

_list() {
	# filter stuff into fzf
	local _fzfPrompt="--prompt=TYPE-TO-FILTER>"
	local _fzfColor="--color=bg:#111111,preview-bg:#222222,prompt:yellow"
	local _fzfHeader="--header=choose from the list above"
	find draft print sent -type f | fzf ${_fzfColor} --preview-window=up,70%,wrap --preview='cat {}'
}

_listRecipients() {
	# lists and sorts all known recipient names
	# uses fzf --print-query...can select from known name or enter a new one
	find draft print sent -type f | cut -f2 -d/ | cut -f1 -d_ | uniq | sort | fzf --print-query | tail -1
}

_edit() {
	local _key
	local _state
	local _path
	_key=$(_list) || { _warn "invalid selection"; return; }
	_state=${_key%%/*}
	vim "+normal G$" "${_key}"
	# next...need to know if the file changed since the last commit
	if ! git -C "${_epistleDir}" --git-dir="${_epistleGitDisk}" diff --quiet --exit-code "${_key}"; then
		git -C "${_epistleDir}" --git-dir="${_epistleGitDisk}" commit -m "edited ${_key}" "${_key}"
	fi
}	

_import() {
	local _importType
	local _importSource
	local _sourceRepoName
	# this first import is from another repo (dev)
	if [[ ! -z "${_importRepo:-}" ]]; then
		# -m flag used...repo merge
		_sourceRepoName=$(basename ${_importRepo})
		cd "${_importRepo}" || { _error "could not change to ${_importRepo}"; exit 1; }
		git diff-index --quiet --cached main || { _error "source is not clean"; return 1; }
		git -C "${_epistleDir}" --git-dir="${_epistleGitDisk}" remote add "${_sourceRepoName}" "${_importRepo}"
		git -C "${_epistleDir}" --git-dir="${_epistleGitDisk}" fetch "${_sourceRepoName}" --tags
		git -C "${_epistleDir}" --git-dir="${_epistleGitDisk}" merge --allow-unrelated-histories "${_sourceRepoName}/main" -m "merge of ${_importRepo}"
		git -C "${_epistleDir}" --git-dir="${_epistleGitDisk}" remote remove "${_sourceRepoName}"
	else
		echo "import a single file"
	fi
}

############################
# CREATE
############################

_create() {
	# create a new germ database
	local _gitUserName=$(git config --global --get user.name)
  local _gitUserEmail=$(git config --global --get user.email)
	local _epistleDisk=${_epistleGitDisk}
  trap _irishExit SIGINT
	_ask "enter studio name ["${_studioDirName}"] "
	read _studioName
	[ -z "${_studioName}" ] || _studioDirName="${_studioName}"
	_ask "enter epistle name ["${_epistleDirName}"] "
	read _epistleName
	[ -z ${_epistleName} ] || _epistleDirName="${_epistleName}"
 _ask "enter preferred username [${_gitUserName}] "
  read _userName
  [ -z ${_userName} ] && _userName="${_gitUserName}"
  _ask "enter preferred email [${_gitUserEmail}] "
  read _userEmail
  [ -z ${_userEmail} ] && _userEmail="${_gitUserEmail}"
	_setEnv
	_info "studio dir name: ${_studioDirName}"
	_info "studio path: ${_studioDir}"
	_info "epistle path: ${_epistleDir}"
	_info "epistle gitdisk: ${_epistleGitDisk}"
	_info "epistle user name: ${_userName}"
	_info "epistle user email: ${_userEmail}"
	read -rsn1 -p "$(_ask 'proceed? (y/n)')" _yn
	echo
	[[ "$_yn" != "y" ]] && { _error "aborting"; exit 1; }
	[ ! -d "${_epistleDir}" ] && mkdir -p "${_epistleDir}"
	git init -q -b main "${_epistleDir}"
	git config --global includeif.gitdir:"${_epistleGitDisk}".path "${_epistleGitDisk}/.gitconfig"
	git config --file="${_epistleGitDisk}"/.gitconfig user.name "${_userName}"
	git config --file="${_epistleGitDisk}"/.gitconfig user.email "${_userEmail}"
	touch ${_logFile}
	echo "epistle.log" > "${_epistleDir}/.gitignore"
	echo "intent/" >> "${_epistleDir}/.gitignore" 
	git -C "${_epistleDir}" --git-dir="${_epistleGitDisk}" add .gitignore
	git -C "${_epistleDir}" --git-dir="${_epistleGitDisk}" commit -m "[genesis] created by ${_userName}"
	mkdir "${_epistleDir}/draft"
	mkdir "${_epistleDir}/print"
	mkdir "${_epistleDir}/sent"
	mkdir "${_epistleDir}/intent"
}

_print() {
	local _printer
	local _what
	local _key
	local _state
	_printer=$(_findPrinters) || { _warn "selection '${_printer}' not a valid printer"; return; }
	_what=$(_list) || { _warn "can't print nothing"; return; }
	_key=${_what##*/}
	_state=${_what%%/*}
	local _header="||page $% of $="
	iconv -c -f utf-8 -t ISO8859-1 "${_what}" | \
		enscript -b"${_header}" -F "Courier7" --margins=50::20: -f "Courier12" -P "${_printer}"
	if [[ "${_state}" != "print" ]]; then
		git ${_git} mv "${_what}" "print/${_key}"
	fi
}

_findPrinters() {
	lpstat -e | fzf --preview-window=right,75%:wrap --preview 'echo "#lpstat:"; lpstat -v {}; echo "#lpq:"; lpq -P {}'
}

###############
###### SHELL
###############

_shell() {
	# enter (cd) into studio environment
	# change the command history file
	# change the prompt dynamically
	cd "${_epistleDir}" || { _error "can not enter epistle"; return 1; }
	HISTFILE="${_studioDir}/.epistle_history"
	HISTSIZE=1000
	HISTFILESIZE=10000
	HISTTIMEFORMAT="%s %F %T "
	HISTCONTROL=ignoreboth
	shopt -s histappend
	set -o history
	local _p
	local _dirty
	# confirm exit function
	_confirmExit() {
		if _isIndexClean; then
			exit
		else
			_debug "index is dirty"
			_ask "save session? press ${label}y${reset} to commit changes, ${label}n${reset} to discard changes"
			while read -r -s -n 1  __confirm; do
				echo # needed for newline after _ask
				case ${__confirm} in
					y)
						git -C "${_epistleDir}" --git-dir="${_epistleGitDisk}" commit -m "[${self}] $(date) closed"
						exit
						;;
					n)
						exit
						;;
					*)
						_mainPrompt
						;;
				esac
			done
		fi
	}
	# print welcome function
	_displayWelcome() {
	cat <<HEREDOC
                                            
 ###### #####  #  ####  ##### #      ###### 
 #      #    # # #        #   #      #      
 #####  #    # #  ####    #   #      #####  
 #      #####  #      #   #   #      #      
 #      #      # #    #   #   #      #      
 ###### #      #  ####    #   ###### ###### 

epistle: type ${green}help${reset} for guidance
         type ${red}stop${reset} to leave

HEREDOC
	}
	# print usage
	_printShellUsage() {
		cat << EOF

  new        start a new letter
  edit       edit a draft letter
  list       list letters in draft, print, and sent
  print      print a letter
  search     maybe?
  inspect    run tig to inspect repo
  stop       exit epistle
  help       print this message

EOF
	}
	# main shell prompt function
	_mainPrompt() {
	#
	# ignore ctrl+\ ctrl+z and ctrl+c
	trap '' SIGQUIT SIGTSTP SIGINT SIGTERM
	_p() {
		# sets the prompt
		# colors cannot derive from tput here...as 'read -e' becomes confused
		reset=$'\001\e[0m\002'
		red=$'\001\e[00;31m\002'
		yellow=$'\001\e[00;33m\002'
		green=$'\001\e[00;32m\002'
		_cH=$'\001\e[00;45m\002'
		_cG=$'\001\e[00;7m\002'
		_cU=$'\001\e[00;32m\002'
		_cS=$'\001\e[00;33m\002'
		_index="${green}o${reset}"
		_isIndexClean || _index="${red}x${reset}"
		_buffer="${green}+${reset}"
		_isBufferClean || _buffer="${red}-${reset}"
		_headRev=$(git ${_git} rev-parse --short HEAD)
		_u=$(git ${_git} config --get user.name)
		echo -n "${_cH}${_studioDirName}${reset}:${_cG}${_epistleDirName}${reset} ${_cU}${_u}${reset} [${_cS}${_headRev}${reset}] ${_buffer}${_index} > "
	}
	local __input
	while IFS='' read -r -d $'\n' -p "$(_p)" -e __input || true; do
		history -s "${__input}"
		if [[ -z "${__input}" ]]; then
			true
		elif [[ ${__input} =~ [[:cntrl:]] ]]; then
			_warn "control char found"
		elif [[ ${__input} == $'\e' ]]; then
			_warn "no escape" && true
		elif [[ "${__input}" =~ (^stop$|^quit$|^exit$|^q$) ]]; then
			_confirmExit
		elif [[ "${__input}" =~ (^help$|^h$|^\?$) ]]; then
			_printShellUsage
		elif [[ "${__input}" =~ (^list$|^l$) ]]; then
			_list || true
		elif [[ "${__input}" =~ (^search$|^s$) ]]; then
			echo "decide whether to even add a search"
		elif [[ "${__input}" =~ (^print$|^p$) ]]; then
			_print
		elif [[ "${__input}" =~ ^git ]]; then
			# pass git commands back through epistle script
			_gitCommand=(${__input})
			git ${_gitWT} ${_gitCommand[@]:1} || :
		elif [[ "${__input}" =~ (^new$|^n$) ]]; then
			eval "${self}" "${_originalParameters}" new || true
		elif [[ "${__input}" =~ (^edit$|^e$) ]]; then
			eval "${self}" "${_originalParameters}" edit || true
		else
			eval "${self}" "${_originalParameters}" "${__input}" || :
		fi
	done
	}
	_displayWelcome
	_mainPrompt
}

###########################
# trap and signal catching
###########################

_irishExit() {
	echo #to clear line...this is a bit ugly
	# this function does not behave as desired
  _ask "ctrl-c detected; to resume, press R, to quit, press ENTER"
  while read -s -t 15 -n 1 _ANS; do
		echo
  	if [[ ${_ANS:-n} = 'R' ]]; then
			_info "resuming"
    	return
  	else
   	#_error "user requested exit with ctrl-c"
			_error "goodbye"
			exit 1
		# this seems to fuck up my terminal???
  	fi
	done
}

main() {
	# what are we trying to do (read all the positional parameters and set VARS)
	_getOpts "${@}"
	_debug "${FUNCNAME}: parameters read: ${*}"
	_debug "${FUNCNAME}: paired-down parameters: $_workingParams"
	_getSubcommand $_workingParams
	_debug "${FUNCNAME}: _subCommand: ${_subCommand:-}"
	_debug "${FUNCNAME}: remaining args: $_workingParams"
	# setup the environment after processing all command line parameters
	_setEnv
	# reinitialize log functions after processing all command line options
	_fLOG
	# validate the environment
	# TODO figure out a better means of knowing
	# 1. is this an interactive shell session
	# 2. is this part of a pipe
	# 3. are we in our custom interactive shell (and does that matter?)
	# set up logging and stdout stderr etc with traps
	# possibly check for tty?
	[[ -t 1 ]] && _debug 'STDOUT is attached to TTY'
	[[ -t 0 ]] || _debug 'STDIN is attached to pipe'
	[[ -p /dev/stdout ]] && _debug 'STDOUT is attached to a pipe'
	[[ ! -t 1 && ! -p /dev/stdout ]] && _debug 'STDOUT is attached to a redirection'
	_isEnvSufficient || { _error "cannot run until these problems are resolved"; return 1; }
	# set the global _user vars
	#_userSet
	# set up traps now	
	#trap _irishExit EXIT
	# run germ shell if no arguments
	[ -z "${_subCommand:-}" ] && _shell
	# ctrl-d exits out of the last command...the trap set in the _shell catches
	# the EXIT signal, and runs.  but by now, we're toast.  ctrl-d must be caught
	# earlier in order to be able to pass the commands back to the master script.
	# it's a handy trick but may be unnecessary
	# otherwise, pass the commands to the called "command"
	_debug "now calling the eval to run '${_subCommand:-}'"
	[ -n "${_subCommand:-}" ] && eval _"${_subCommand}" || exit
}
main "${@}"
