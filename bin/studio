#!/usr/bin/env bash
# file: studio
# source: https://github.com/periplume/studio.git
# author: jason@bloom.us
# SCRIPT AND SHELL SETTINGS
set -o errexit  # set -e
set -o nounset
set -o pipefail

###########################
# LIBRARY SOURCES
###########################

source studio-lib.sh

###########################
# LOGGING AND CONSOLE
###########################

_fLOG
# the log/console functions instantited now will be re-initialized after all the
# command line parameters are processed

###########################
# PREREQUISITES
###########################
 
# required commands
_requiredCommands=(git gitdisk dsink vipe fzf)

# recommended commands
_recommendedCommands=(git-sizer tig)

###########################
# ENVIRONMENT SETTINGS
###########################

# GLOBAL VARIABLES
# these never change in the context of a session
# these will be exported (in the case of fzf previews etc) 

# WORKING ENVIRONMENT
# _studioDirName is the working environment (typically in $HOME)
_studioDirName=studio
# get the name of the script itself
self=$(basename $0)

# USER NAME
# the git username and email are used to create a short hash which identifies
# the user in the namespace.  it is set as a global variable and used in various
# places.  it can be overridden here.
#_user=e291

# BEHAVIOR

# debugging and logging settings
# script debug toggle (set to true to enable default global debugging)
_DEBUG=false
# silent mode for scripting (supresses all output)
_SILENT=false
# logging facility
_LOG=false

####################################
# HELPER FUNCTIONS
####################################

_printUsage () {
  cat << EOF

usage: studio [OPTIONS] <command> [OPTIONS]
${red}NEEDS FIXING${reset}

options:
 -h      print this usage info
 -l      log commands and debug info to log file
 -d      print debug info to stdout and/or log
 -s      suppress all stdout/stderr
 -v      print version number and exit

alternate env settings:
 -a <name>  set the germ dir name to <name>
 -w <name>  set the master studio dir to <name> (assumes \$HOME/<name>)

commands:
 add                 add a new germ entry to the database
 edit                edit an existing germ entry
 create              create a new germ git database
 inspect             run tig on the germ git bare repo
 sizer               run github sizer tool on germ git bare repo

EOF
}

_printInfo () {
  cat << EOF

studio needs explaining in a few words

EOF
}

####################################
# PARAMETER PROCESSING FUNCTIONS
####################################

_getOpts () {
	# check for global command flags and set VARS accordingly
	local OPTIND
	# make the original environment available to _shell for calling back into main
	export _originalParameters=${*}
	_debug "${FUNCNAME}: positional parameters read: $*"
	while getopts ":hsdlva:w:" flag ; do
		_debug "${FUNCNAME}: OPTIND=$OPTIND flag=$flag"
		case ${flag} in 
			h)
				_printInfo ; _printUsage; exit 0
				;;
			a)
				export _germDirName=$OPTARG
				# TODO find a better way of avoiding using key words as OPTARGs
				[[ $OPTARG =~ add|edit|create|print ]] && { _error "'$OPTARG' not allowed as name for -$flag"; exit 1; }
				_debug "using alternative germ name '$_germDirName'"
				;;
			w)
				export _studioDirName=$OPTARG
				[[ $OPTARG =~ add|edit|create|print ]] && { _error "'$OPTARG' not allowed as name for -$flag"; exit 1; }
				_debug "using alternative studio name '$_studioDirName'"
				;;
 	    s)
				_debug "${FUNCNAME}: enabling silent mode with flag -$flag"
 	      export _SILENT=true
				;;
			d)
				_debug "${FUNCNAME}: enabled debug mode with flag -$flag"
				export _DEBUG=true
				;;
			l)
				_debug "${FUNCNAME}: enabled log mode with flag -$flag"
				export _LOG=true
				;;
			v)
				_info "${green}verion${reset}: beta"; exit 0
				;;
			?)
				_error "invalid global option: -$OPTARG"; exit 1
				;;
		esac
	done
	shift $((OPTIND - 1))
	# export a paired down parameter string flags and args read within this
	# function will be discarded, leaving behind only that which the rest needs
	export _workingParams=$*
	_debug "${FUNCNAME}: _LOG=${_LOG}"
	_debug "${FUNCNAME}: _SILENT=${_SILENT}"
	_debug "${FUNCNAME}: _DEBUG=${_DEBUG}"
	return
}

_getSubcommand() {
	# look for the first subcommand and set _subCommand accordingly
	while ((${#})); do
		_debug "${FUNCNAME}: reading parameter '${1}'"
		case $1 in
			help)
				_printInfo ; _printUsage; exit 0
				;;
			status)
				_debug "${FUNCNAME}: '$1' called, checking for $1 flags now"
				_subCommand=$1
				#_getStatusOpts
				return
				;;
			test)
				_subCommand=$1
				return
				;;
			*)
				_error "${FUNCNAME}: '${1}' is not a subcommand"
				return 1
				;;
		esac
		shift
	done
}

_setEnv() {
	# set (and print) the environment
	#_info "setting up environment now"
	export _studioDir="$(dirname ~/.)/${_studioDirName}"
	export _logFile="${_studioDir}/studio.log"
	[[ -f "${_logFile}" ]] && _canLog=true || _canLog=false
	export _canLog
	_debug "self=$self"
	_debug "_studioDirName=$_studioDirName"
	_debug "_studioDir=$_studioDir"
	_debug "_logFile=$_logFile"
	_debug "_canLog=${_canLog:-false}"
	_debug "_user=${_user:-unset}"
	_debug "_DEBUG=$_DEBUG"
	_debug "_SILENT=$_SILENT"
	_debug "_LOG=$_LOG"
}

_isEnvSufficient() {
	# check for required tools, report accordingly
	# TODO add recommended checks with _missing{0:name,1:name}
	local _sufficient=true
	for _required in "${_requiredCommands[@]}"; do
		if ! hash "${_required}" 2>/dev/null; then
			_warn "${FUNCNAME}: ${_required} not found"
			_sufficient=false
		else
			_debug "${FUNCNAME}: ${_required} found"
		fi
	done
	# check for germ dir (unless we are running create)
	if [ ! -d "${_studioDir}" ]; then
		if [ -z "${_subCommand:-}" ]; then
			_error "found no ${_studioDir}; run a create function first?"
		 	return 1
		elif [ ! ${_subCommand:=} = "create" ]; then
			_error "found no ${_studioDir}; run 'studio create' first??"
			_sufficient=false
		fi
	fi
	[ ${_sufficient} = true ] && return 0 || return 1
}

#################################
# SUBCOMMAND OPTION PROCESSING
#################################

_getAddOpts() {
	# check for _add() flags and args
	local OPTIND=1
	set -- ${_workingParams}
	_debug "${FUNCNAME}: positional parameters read: $*"
	shift
	while getopts ":ib" flag "$@"; do
		case ${flag} in
			i)
				# inline add (no editor invoked)
				_debug "enabled inline mode"
				_inline=true
				;;
			b)
				# bulk add disables commit...this is a hack
				_debug "bulk add operation"
				_bulk=true
				;;
			?)
				 _error "${FUNCNAME}: unknown flag -$OPTARG"; exit 1
				;;
		esac
	done
	shift $((OPTIND - 1))
	export _workingParams=$*
}

_search() {
	local _query="${*:-}"
	local _rg="rg --line-number --no-heading --color=always --smart-case -g '!*.ps' --multiline --text "
	FZF_DEFAULT_COMMAND="$_rg $(printf %q "$_query")" \
		fzf --ansi \
				--disabled \
				--no-mouse \
				--query "${_query}" \
				--bind "change:reload:sleep 0.1; $_rg {q} || true" \
				--delimiter : \
				--info=inline \
				--preview 'batcat --color=always {1} --highlight-line {2}' \
				--preview-window 'up,60%,border-bottom,+{2}+3/3,~3' \
				--bind "enter:execute(less {1})"
}

__search() {
	local _query="${*:-}"
	local _rg="rg --column --line-number --no-heading --color=always --smart-case "
	FZF_DEFAULT_COMMAND="$_rg '$_query'" \
		fzf --bind "change:reload:$_rg {q} || true" \
				--ansi --disabled --query "$_query"
}
###############
###### SHELL
###############

_shell() {
	# enter (cd) into studio environment
	# change the command history file
	# change the prompt dynamically
	cd "${_studioDir}" || { _error "can not enter studio"; return 1; }
	HISTFILE="${_studioDir}/.studio_history"
	HISTSIZE=1000
	HISTFILESIZE=10000
	HISTTIMEFORMAT="%s %F %T "
	HISTCONTROL=ignoreboth
	shopt -s histappend
	set -o history
	local _p			#prompt
	local _menu		#a list of all possible commands
	# data protection level indicators
	# RF levels are defined as follows:
	# RF-1: buffer, editor autosave/swap areas, the dirtiest
	# RF-2: commit status (ie is the index dirty)
	# RF-3: plugged dsink USB device status
	# RF-4: keychain dsink USB device status
	# RF-5: remote repos connection status
	# each is displayed as green, yellow, or red
	# TODO fill out these functions to display different levels accurately
	_getRF-1() {
		echo "1"
	}
	_getRF-2() {
		echo "${green}2${reset}"
	}
	_getRF-3() {
		echo "${yellow}3${reset}"
	}
	_getRF-4() {
		echo "${red}4${reset}"
	}
	_getRF-5() {
		echo "5"
	}
	_getDsinkMedia() {
		# print the dsink media tag in green or print 'none' in red
		local _dsinkMediaName
		_dsinkMediaName="${green}$(dsink status -m)${reset}" || _dsinkMediaName="${red}none${reset}"
		echo ${_dsinkMediaName}
	}
	_printStudioContents() {
		# the dynamic menu
		# list the subdirectories inside studio
		local _cmds
		_cmds=$(ls .)
		echo "${_cmds}"
		# build this out to display type/status/etc for each studio "module"
		# use printf etc and colors
	}
	_interactiveCommandReader() {
		# command line feedback
		local _commandList
		#shopt -s extglob
		while true; do
			_commandList=$(_printStudioContents)
			_altCommands=("get" "print" "show")
			_feed=("${_commandList}" "${_altCommands}")
			_chosen="$(printf '%s\n' "${_feed[@]}" |
				fzf --margin=10% --preview '
					if $(test -d {}/.git); then
						echo {} is a git repo
					else
						ls -a --color {}
					fi
			')"
			# if the selection is something, return
			# but not if nothing is selected
			#[[ ${#_chosen} != 0 ]] || return 0
			echo ${_chosen} && return 0
		done
	}
	_displayWelcome() {
		echo -ne "
   ${yellow}**${cyan}STUDIO${reset}${yellow}**${reset}
                             
   studio: type ${green}h${reset} for guidance
           type ${red}q${reset} to quit

"
	}
	_printShellUsage() {
		echo -ne "
  ?    show help
  l    list studio contents
  w    wordnet lookup
  g    germ
  e    epistle
  s    search
  m    mount dsink usb
  b    backup to dsink
  q    quit

"
	}
	# main shell prompt function
	_mainPrompt() {
	#
	# ignore ctrl+\ ctrl+z and ctrl+c
	trap '' SIGQUIT SIGTSTP SIGINT SIGTERM
	_p() {
		# sets the prompt
		# colors cannot derive from tput here...as 'read -e' becomes confused
		reset=$'\001\e[0m\002'
		red=$'\001\e[00;31m\002'
		yellow=$'\001\e[00;33m\002'
		green=$'\001\e[00;32m\002'
		_cH=$'\001\e[00;45m\002'		#home
		_cG=$'\001\e[00;7m\002'			#germ
		_cU=$'\001\e[00;32m\002'		#user
		_cS=$'\001\e[00;33m\002'		#source
		_data="$(_getRF-1)$(_getRF-2)$(_getRF-3)$(_getRF-4)$(_getRF-5)"
		echo -n "${_cH}${_studioDirName}${reset}:${_cU}jason${reset} [${_data}:$(_getDsinkMedia)] > "
	}
	local __input
	# simple one character interface
	while read -rsn1 -p "$(_p)" __input || true; do
	echo
		case ${__input} in
			l)
				_interactiveCommandReader || :
				;;
			h|\?)
				_printShellUsage
				;;
			q)
				exit
				;;
			b)
				dsink backup || { _warn "dsink backup failed"; continue; }
				;;
			m)
				dsink mount || { _warn "could not mount dsink usb"; continue; }
				;;
			g)
				printf '\e[?5h'; sleep 0.2 ; printf '\e[?5l'
				clear
				germ || { _warn "an error occurred in germ"; continue; }
				;;
			e)
				printf '\e[?5h'; sleep 0.2 ; printf '\e[?5l'
				clear
				epistle
				;;
			s)
				_search || :
				;;
			w)
				wordnet.studio || :
				;;
			$'\e')
				# read escape keys
				read -rsn1 -t .002 _escKey || { echo "escape key can be made useful"; continue; }
				if [[ "$_escKey" == "[" ]]; then
					read -rsn1 -t .002 _escKey
						case "$_escKey" in
							"A")
								echo "up arrow key ($_escKey) can be made useful"
								;;
							"B")
								echo "down arrow key ($_escKey) can be made useful"
								;;
							"C")
								echo "right arrow key ($_escKey) can be made useful"
								;;
							"D")
								echo "left arrow key ($_escKey) can be made useful"
								;;
							"3")
								echo "delete key ($_escKey) can be made useful"
								;;
							"2")
								echo "insert key ($_escKey) can be made useful"
								;;
							"F")
								echo "end key ($_escKey) can be made useful"
								;;
							"H")
								echo "home key ($_escKey) can be made useful"
								;;
							*) echo "$_escKey pressed"
								;;
						esac
				else
					echo "escape sequence pressed ($_escKey)"
				fi
				read -rsn6 -t .002 || continue
				;;
			$'\177')
				echo "backspace key can be made useful"; continue
				read -rsn1 -t .002 _ctrlKey || echo "couldn't read control key ($_ctrlKey)"
				echo $_ctrlKey
				;;
			$'\04')
				echo "ctrl-d can be made useful"; continue
				read -rsn1 -t .002 _ctrlKey || echo "couldn't read control key ($_ctrlKey)"
				echo $_ctrlKey
				;;
			*)
				continue
				;;
			# still "alt-[" sends an exit signal it seems?  maybe a good backdoor exit
		esac
	done
	}
	_displayWelcome
	_mainPrompt
}

main() {
	# what are we trying to do (read all the positional parameters and set VARS)
	_getOpts "${@}"
	_debug "${FUNCNAME}: parameters read: ${*}"
	_debug "${FUNCNAME}: paired-down parameters: $_workingParams"
	_getSubcommand $_workingParams
	_debug "${FUNCNAME}: _subCommand: ${_subCommand:-}"
	_debug "${FUNCNAME}: remaining args: $_workingParams"
	# setup the environment after processing all command line parameters
	_setEnv
	# reinitialize log functions after processing all command line options
	_fLOG
	# validate the environment
	# TODO figure out a better means of knowing
	# 1. is this an interactive shell session
	# 2. is this part of a pipe
	# 3. are we in our custom interactive shell (and does that matter?)
	# set up logging and stdout stderr etc with traps
	# possibly check for tty?
	[[ -t 1 ]] && _debug 'STDOUT is attached to TTY'
	[[ -t 0 ]] || _debug 'STDIN is attached to pipe'
	[[ -p /dev/stdout ]] && _debug 'STDOUT is attached to a pipe'
	[[ ! -t 1 && ! -p /dev/stdout ]] && _debug 'STDOUT is attached to a redirection'
	_isEnvSufficient || { _error "cannot run until these problems are resolved"; return 1; }
	# run shell if no arguments
	[ -z "${_subCommand:-}" ] && _shell
}
main "${@}"
